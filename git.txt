http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000
1、创建版本库

	一、选择一个合适的地方，创建一个空目录
		选择盘： cd E:
		mkdir mygit
		cd mygit (进入创建的文件夹)
		pwd(显示当前目录)
	
	二、git init 把当前目录变成Git可以管理的仓库
	
	现在我们编写一个readme.txt文件，内容如下：

		Git is a version control system.
		Git is free software.
		把这个文件放在mygit目录下
		
		
	把一个文件放到Git仓库只需要两步。
		
			
	一、	git add readme.txt把文件添加到仓库(没有任何显示，说明添加成功)
	
	二、	git commit -m "wrote a readme file"告诉Git,把文件提交到仓库
		
		
	小结

		现在总结一下今天学的两点内容：

			初始化一个Git仓库，使用git init命令。

		添加文件到Git仓库，分两步：

			第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；

			第二步，使用命令git commit，完成。
			
2、时光机穿梭
	我们已经成功地添加并提交了一个readme.txt文件，现在，是时候继续工作了，于是，我们继续修改readme.txt文件，改成如下内容：
	Git is a distributed version control system.
	Git is free software.
	
	现在，运行git status命令看看结果：
	$ git status
	# On branch master
	# Changes not staged for commit:
	#   (use "git add <file>..." to update what will be committed)
	#   (use "git checkout -- <file>..." to discard changes in working directory)
	#
	#    modified:   readme.txt
	#
	no changes added to commit (use "git add" and/or "git commit -a")
	
	git status命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，readme.txt被修改过了，但还没有准备提交的修改。
	
	虽然Git告诉我们readme.txt被修改了，但如果能看看具体修改了什么内容，自然是很好的。比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的readme.txt，所以，需要用git diff这个命令看看：
	
	$ git diff readme.txt 
	diff --git a/readme.txt b/readme.txt
	index 46d49bf..9247db6 100644
	--- a/readme.txt
	+++ b/readme.txt
	@@ -1,2 +1,2 @@
	-Git is a version control system.
	+Git is a distributed version control system.
	 Git is free software.
	git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式，可以从上面的命令输出看到，我们在第一行添加了一个“distributed”单词。
	
	知道了对readme.txt作了什么修改后，再把它提交到仓库就放心多了，提交修改和提交新文件是一样的两步，第一步是git add：
	
	知道了对readme.txt作了什么修改后，再把它提交到仓库就放心多了，提交修改和提交新文件是一样的两步，第一步是git add：
	
	$ git add readme.txt
	
	同样没有任何输出。在执行第二步git commit之前，我们再运行git status看看当前仓库的状态：
	
	$ git status
	# On branch master
	# Changes to be committed:
	#   (use "git reset HEAD <file>..." to unstage)
	#
	#       modified:   readme.txt
	#
	
	git status告诉我们，将要被提交的修改包括readme.txt，下一步，就可以放心地提交了：
	
	$ git commit -m "add distributed"
	[master ea34578] add distributed
	 1 file changed, 1 insertion(+), 1 deletion(-)
	 
	 提交后，我们再用git status命令看看仓库的当前状态：
	 
	 $ git status
	# On branch master
	nothing to commit (working directory clean)
	
	小结



3、版本回退

	git log版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用git log命令查看：
		
	git log命令显示从最近到最远的提交日志，我们可以看到3次提交，最近的一次是append GPL，上一次是add distributed，最早的一次是wrote a readme file。
	如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：
	
		$ git log --pretty=oneline
		3628164fb26d48395383f8f31179f24e0882e1e0 append GPL
		ea34578d5496d7dd233c827ed32a8cd576c5ee85 add distributed
		cb926e7ea50ad11b8f9e909c05226233bf755030 wrote a readme file

	好了，现在我们启动时光穿梭机，准备把readme.txt回退到上一个版本，也就是“add distributed”的那个版本，怎么做呢？

	首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

	现在，我们要把当前版本“append GPL”回退到上一个版本“add distributed”，就可以使用git reset命令：
		$ git reset --hard HEAD^
		HEAD is now at ea34578 add distributed
	
	
	cat 查看文件内容
	看看readme.txt的内容是不是版本add distributed：

	$ cat readme.txt
	Git is a distributed version control system.
	Git is free software.
	
	最新的那个版本append GPL已经看不到了！好比你从21世纪坐时光穿梭机来到了19世纪，想再回去已经回不去了，肿么办？

	办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个append GPL的commit id是3628164...，于是就可以指定回到未来的某个版本：
	
	$ git reset --hard 3628164
	HEAD is now at 3628164 append GPL
	
	现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的commit id怎么办？

	在Git中，总是有后悔药可以吃的。当你用$ git reset --hard HEAD^回退到add distributed版本时，再想恢复到append GPL，就必须找到append GPL的commit id。Git提供了一个命令git reflog用来记录你的每一次命令：

	
	小结

	现在总结一下：

	HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

	穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
	
4、工作区和暂存区

	工作区（Working Directory）

	就是你在电脑里能看到的目录，比如我的mygit文件夹就是一个工作区：
	
	工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。

	Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。

	git-repo

	分支和HEAD的概念我们以后再讲。

	前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：

	第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；

	第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。

	因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。

	你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。
	
	小结

	暂存区是Git非常重要的概念，弄明白了暂存区，就弄明白了Git的很多操作到底干了什么。

	没弄明白暂存区是怎么回事的童鞋，请向上滚动页面，再看一次。
	
5、管理修改

	咦，怎么第二次的修改没有被提交？

	别激动，我们回顾一下操作过程：

	第一次修改 -> git add -> 第二次修改 -> git commit

	你看，我们前面讲了，Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。

	那怎么提交第二次修改呢？你可以继续git add再git commit，也可以别着急提交第一次修改，先git add第二次修改，再git commit，就相当于把两次修改合并后一块提交了：

	第一次修改 -> git add -> 第二次修改 -> git add -> git commit

	好，现在，把第二次修改提交了，然后开始小结。

	小结

	现在，你又理解了Git是如何跟踪修改的，每次修改，如果不add到暂存区，那就不会加入到commit中。
	
6、撤销修改
	命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

	一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

	总之，就是让这个文件回到最近一次git commit或git add时的状态。
	
	git checkout -- file命令中的--很重要，没有--，就变成了“创建一个新分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。
	
	Git同样告诉我们，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：

	$ git reset HEAD readme.txt
	Unstaged changes after reset:
	M       readme.txt
	git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。

	再用git status查看一下，现在暂存区是干净的，工作区有修改：
	
	小结

	又到了小结时间。

	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

	
7、删除文件

    一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了：

    $ rm test.txt

    现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：

    $ git rm test.txt
    rm 'test.txt'
    $ git commit -m "remove test.txt"
    [master d17efd8] remove test.txt
    1 file changed, 1 deletion(-)
    delete mode 100644 test.txt
 
    现在，文件就从版本库中被删除了。

    另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：

    $ git checkout -- test.txt

    git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

小结

    命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

8、远程仓库
    第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：

    $ ssh-keygen -t rsa -C "youremail@example.com"

    第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：

然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：

9、添加远程仓库
    1、github 或coding 等远程仓库建仓库

    2、GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。

现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：
    $git remote add origin git@github.com:songxiafeng/learngit.git

    origin 是远程库的名字

    下一步，就可以把本地库的所有内容推送到远程库上：

    $ git push -u origin master

    把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。

    由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。


    从现在起，只要本地作了提交，就可以通过命令：

        $git push origin master


    SSH警告
    当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：
    是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。

    小结
        要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

        关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
        此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

        分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！


10、从远程库克隆

    1、准备好远程库

    2、下一步是用命令git clone克隆一个本地库：

        $ git clone git@...

        如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。

    小结

        要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。

        Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

11、创建与合并分支

    截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。

    一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：

    每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长：

    当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：

    你看，Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！

    不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：

    假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：

    所以Git合并分支也很快！就改改指针，工作区内容也不变！

    合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支：

    实战：

        首先，我们创建dev分支，然后切换到dev分支

            $ git checkout -b dev

            git checkout命令加上-b参数表示创建并切换，相当于以下两条命令
                $ git branch dev
                $ git checkout dev


        然后，用git branch命令查看当前分支：
            $ git branch
                * dev
                master

    现在，我们把dev分支的工作成果合并到master分支上：

        $ git merge dev

    git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。

    git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。

        $ git branch -d dev

    因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。

    小结

    Git鼓励大量使用分支：

        查看分支：git branch

        创建分支：git branch <name>

        切换分支：git checkout <name>

        创建+切换分支：git checkout -b <name>

        合并某分支到当前分支：git merge <name>

        删除分支：git branch -d <name>
    
12、解决冲突

    $ git checkout -b feature1创建一个分支

    $ git checkout master切换到master

    $ git merge feature1全并feature1分支

    
    $git status查看冲突状态

    用带参数的git log也可以看到分支的合并情况：
    $ git log --graph --pretty=oneline --abbrev-commit

    $ git branch -d feature1删除

    小结

    当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

    用git log --graph命令可以看到分支合并图。
